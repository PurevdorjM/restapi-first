const Category = require('../models/Category');
const path = require('path');
const MyError =  require('../utils/myError');
const asyncHandler = require('../middlleware/asyncHandler');
const paginate = require('../utils/paginate');

exports.getCategories = asyncHandler(async (req, res, next) => {

    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 10;
    const sort = req.query.sort;
    const select = req.query.select;
    ['select', 'sort', 'page', 'limit'].forEach(el => delete req.query[el]);

    // Pagination
    const pagination = await paginate(page, limit, Category);
    
        const category = await Category.find(req.query, select)
        .sort(sort)
        .skip(pagination.start - 1)
        .limit(limit);

        res.status(200).json({
            success: true,
            data: category, 
            pagination,          
        });
});


exports.getCategy = asyncHandler(async (req, res, next) => {

    req.db.teacher.create({
        id: 3,
        name: '–°–∞—Ä–∞–∞',
        phone: '99667788',
        password: '123123',
    });
    req.db.course.create({
        id: 2,
        name: 'NodeJS —Ö–∏—á—ç—ç–ª',
        price: '32000',
        tailbar: '–ü—Ä–æ–≥—Ä–∞–º–º—á–ª–∞–ª—ã–Ω —Ö–∏—á—ç—ç–ª',
    });


        const category = await Category.findById(req.params.id).populate('books');
        if(!category){
            throw new MyError(req.params.id + ' ID-—Ç–∞–π –∫–∞—Ç–µ–≥–æ—Ä–∏ ”©–≥”©–≥–¥–ª–∏–π–Ω —Å–∞–Ω–¥ –±–∞–π—Ö–≥“Ø–π',400);
        }

        res.status(200).json({
            success: true,
            data: category,
        });
})

exports.createCategy = asyncHandler(async (req, res, next) => {

        const category = await Category.create(req.body);

        res.status(200).json({
            success: true,
            data: category,
        });
})

exports.updateCategy = asyncHandler(async (req, res, next) => {
        const category = await Category.findByIdAndUpdate(req.params.id, req.body, {
            new: true,
            runValidators: true,
        });

        if(!category){
            throw new MyError(req.params.id + ' ID-—Ç–∞–π –∫–∞—Ç–µ–≥–æ—Ä–∏ ”©–≥”©–≥–¥–ª–∏–π–Ω —Å–∞–Ω–¥ –±–∞–π—Ö–≥“Ø–π',400);
        }

        res.status(200).json({
            success: true,
            data: category,
        });
})

exports.deleteCategy = asyncHandler(async(req, res, next) => {  
        const category = await Category.findById(req.params.id);

        if(!category){
            throw new MyError(req.params.id + ' ID-—Ç–∞–π –∫–∞—Ç–µ–≥–æ—Ä–∏ ”©–≥”©–≥–¥–ª–∏–π–Ω —Å–∞–Ω–¥ –±–∞–π—Ö–≥“Ø–π',400);
        }

        category.remove();

        res.status(200).json({
            success: true,
            data: category,
        });
})


// PUT: api/v1/categories/:id/photo
exports.uploadCategoryPhoto = asyncHandler(async (req, res, next) => {
    const category = await Category.findById(req.params.id);

    if(!category){
        throw new MyError(req.params.id + ' ID-—Ç–∞–π –∫–∞—Ç–µ–Ω–æ—Ä–∏ ”©–≥”©–≥–¥–ª–∏–π–Ω —Å–∞–Ω–¥ –±–∞–π—Ö–≥“Ø–π',400);
    }

    // image upload

    const file = req.files.file;

    if(!file.mimetype.startsWith('image')){
        throw new MyError('–¢–∞ –∑”©–≤—Ö”©–Ω –∑—É—Ä–∞–≥ –æ—Ä—É—É–ª–∞—Ö –±–æ–ª–æ–º–∂—Ç–æ–π üê∞',400);
    }

    if(file.size > process.env.MAX_UPLOAD_FILE_SIZE){
        throw new MyError('–¢–∞–Ω—ã –∑—É—Ä–≥–∏–π–Ω —Ö—ç–º–∂—ç—ç –∏—Ö –±–∞–π–Ω–∞. üê∞',400);
    }

    file.name = `photo_${req.params.id}${path.parse(file.name).ext}`;

    file.mv(`${process.env.FILE_UPLOAD_PATH}/${file.name}`, (err) => {

        if(err) {
            throw new MyError('–§–∞–π–ª—ã–≥ —Ö—É—É–ª–∞—Ö —è–≤—Ü–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞ üê∞ –ê–ª–¥–∞–∞: ' + err.message,400);
        };

        category.photo = file.name;
        category.save();

        res.status(200).json({
            success: true,
            data: file.name,
        })
    });
})